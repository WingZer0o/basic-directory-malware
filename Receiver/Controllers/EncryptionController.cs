using CasDotnetSdk.Symmetric;
using Microsoft.AspNetCore.Mvc;
using Shared;

namespace Receiver.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EncryptionController : ControllerBase
    {
        [HttpGet("AesKey")]
        public async Task<IActionResult> GetAesKey()
        {
            AESWrapper wrapper = new AESWrapper();
            string aesKey = wrapper.Aes256Key();
            string aesNonce = wrapper.GenerateAESNonce();
            string newId = Guid.NewGuid().ToString();
            AesKeyResult keyResult = new AesKeyResult()
            {
                Key = aesKey,
                Nonce = aesNonce,
                Id = newId
            };
            ReceiverCache.connections.Add(newId, keyResult);
            return new OkObjectResult(keyResult);
        }

        [HttpPost("AesEncryptedFile")]
        public async Task<IActionResult> AesEncryptedFile([FromBody]AesEncryptedFile encryptedFile)
        {
            AesKeyResult keyResult = ReceiverCache.connections.GetValueOrDefault(encryptedFile.Id);
            if (keyResult != null)
            {
                AESWrapper wrapper = new AESWrapper();
                byte[] plaintext = wrapper.Aes256DecryptBytes(keyResult.Nonce, keyResult.Key, encryptedFile.EncryptedBytes);
                string targetDir = Directory.GetCurrentDirectory();
                string[] fileName = encryptedFile.FileName.Split("_owned");
                System.IO.File.WriteAllBytes(targetDir + "/" + fileName[0] + fileName[1], plaintext);
                return new OkResult();
            }
            else
            {
                return new BadRequestObjectResult(new { error = "No Aes Key was generated on the server side" });
            }
        } 
    }
}
